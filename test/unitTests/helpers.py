from stl.signals import Signal, BooleanSignal
from typing import Union
import math

def getWavelengthCos(x: float, waveLength: float) -> float:
	# Computes the cosine value for a modified cosine function with specified wavelength
	return math.cos(2*math.pi * x / waveLength)

def getCosSignal(duration: float, offset: float = 0, name: str = 'cos_autogenerated', booleanSignal: bool = True) -> Union[Signal, BooleanSignal]:
	sigtype = BooleanSignal if booleanSignal else Signal
	current: float = 0
	ret: sigtype = sigtype(name=name)
	while current < duration:
		# Use wave-length two to have checkpoints at 1, 2, 3, 4, 5, ...
		ret.emplaceCheckpoint(current, getWavelengthCos(current + offset, 2), -1)
		current += 1
		ret.emplaceCheckpoint(current, getWavelengthCos(current + offset, 2), 1)
		current += 1
	ret.emplaceCheckpoint(duration, 0, 0)
	return ret

def getShiftedCosSignal(duration: float, name: str = 'shiftcos_autogenerated') -> Union[Signal, BooleanSignal]:
	return getCosSignal(duration, 1)

