import unittest
import unittest.mock as mock
from stl.tree import UntilNode
from stl.signals import Signal, BooleanSignal, SignalValue
from .helpers import getCosSignal
from stl.utility import Interval, interval
import warnings
import math
import time

from stl.operators import computeTimedUntil, computeTimedEventually, computeUntimedUntil, computeUntimedEventually, computeAnd, computeOr

class UntilNodeSetup(unittest.TestCase):
	def setUp(self):
		super().setUp()
		self.node: UntilNode = UntilNode()
		self.leftSignalChild: mock.Mock = mock.Mock()
		self.intervalLowerBoundChild: mock.Mock = mock.Mock()
		self.intervalUpperBoundChild: mock.Mock = mock.Mock()
		self.rightSignalChild: mock.Mock = mock.Mock()
		self.node.children = [self.leftSignalChild, self.intervalLowerBoundChild, self.intervalUpperBoundChild, self.rightSignalChild]

	def setInputSignals(self, s1: Signal, s2: Signal):
		self.leftSignalChild.quantitativeValidate.return_value = s1
		self.leftSignalChild.booleanValidate.return_value = s1
		self.rightSignalChild.quantitativeValidate.return_value = s2
		self.rightSignalChild.booleanValidate.return_value = s2

	def setInterval(self, a: float, b: float):
		aSig: Signal = Signal.createConstant("a", a, [0])
		bSig: Signal = Signal.createConstant("b", b, [0])
		self.intervalLowerBoundChild.quantitativeValidate.return_value = aSig
		self.intervalLowerBoundChild.booleanValidate.return_value = aSig
		self.intervalUpperBoundChild.quantitativeValidate.return_value = bSig
		self.intervalUpperBoundChild.booleanValidate.return_value = bSig

	def resetMocks(self):
		self.leftSignalChild.reset_mock()
		self.intervalLowerBoundChild.reset_mock()
		self.intervalUpperBoundChild.reset_mock()
		self.rightSignalChild.reset_mock()

class UntilNodeTest(UntilNodeSetup):
	def setUp(self):
		super().setUp()


	def efficientAlgorithmTemporaryEqualityFunction(self, obtainedResult: Signal, expectedResult: Signal) -> bool:
		i = 0
		for cp in expectedResult.getCheckpoints():
			expectedMatchIndex = obtainedResult.getCheckpoints().bisect_left(cp)
			expectedMatch = obtainedResult.getCheckpoints()[expectedMatchIndex]
			try:
				self.assertTrue(math.isclose(expectedMatch.getTime(), cp.getTime(), rel_tol=1e-7)) 
				self.assertTrue(math.isclose(expectedMatch.getValue(), cp.getValue(), rel_tol=1e-7)) 
				#self.assertTrue(math.isclose(expectedMatch.getDerivative(), cp.getDerivative(), rel_tol=1e-7))
			except AssertionError:
				raise AssertionError(f"Mismatch!\n\tExpected: {cp}\n\tReceived: {expectedMatch}")
			# expectedResult.recomputeDerivatives() # Verify that this fixes things!
			# try:
			# 	self.assertTrue(math.isclose(expectedMatch.getTime(), cp.getTime(), rel_tol=1e-7)) 
			# 	self.assertTrue(math.isclose(expectedMatch.getValue(), cp.getValue(), rel_tol=1e-7)) 
			# 	self.assertTrue(math.isclose(expectedMatch.getDerivative(), cp.getDerivative(), rel_tol=1e-7))
			# except AssertionError:
			# 	raise AssertionError(f"Mismatch!\n\tExpected: {cp}\n\tReceived: {expectedMatch}\nNext Checkpoint:\n\tExpected: {expectedResult.getCheckpoint(i+1)}"
      #                        f"\n\tReceived: {obtainedResult.getCheckpoint(obtainedResult.computeIndexForTime(expectedResult.getTime(i+1)))}"
			# 											 f"\nObtained Signal has following next cp: {obtainedResult.getCheckpoint(expectedMatchIndex + 1)}")

			i += 1


	def __runQuantitativeUntilComplexTestCases(self):
		self.setInterval(TESTCASE1_INTERVAL_LOWERBOUND, TESTCASE1_INTERVAL_UPPERBOUND)
		self.setInputSignals(TESTCASE1_LEFTCHILD_SIGNAL, TESTCASE1_RIGHTCHILD_SIGNAL)
		startTime = time.time()
		foundResult = self.node.quantitativeValidate(None, None)
		stop = time.time()

		print(f"Time taken = {stop - startTime}")

		self.efficientAlgorithmTemporaryEqualityFunction(foundResult, TESTCASE1_RESULT_SIGNAL)

		self.setInterval(TESTCASE2_INTERVAL_LOWERBOUND, TESTCASE2_INTERVAL_UPPERBOUND)
		self.setInputSignals(TESTCASE2_LEFTCHILD_SIGNAL, TESTCASE2_RIGHTCHILD_SIGNAL)
		startTime = time.time()
		foundResult = self.node.quantitativeValidate(None, None)
		stop = time.time()

		print(f"Time taken = {stop - startTime}")
		self.efficientAlgorithmTemporaryEqualityFunction(foundResult, TESTCASE2_RESULT_SIGNAL)

	def testComplexShortQuantitativeUntil(self):
		warnings.warn("Complex short test disabled!")
		return
		self.node.useSyntaxAlgorithm()
		self.__runQuantitativeUntilComplexTestCases()

	def testComplexLongQuantitativeUntil(self):
		warnings.warn("Complex long test disabled!")
		return
		self.node.useEfficientAlgorithm()
		self.__runQuantitativeUntilComplexTestCases()

	def __simpleSignalTestHelper(self):
		simpleSignal = Signal('test', [0, 1], [0, 1], [1, 0])
		self.setInputSignals(simpleSignal, simpleSignal)
		self.setInterval(0, 1)
		expectedResult = Signal('timedUntil', [0], [0], [0])
		self.assertEqual(expectedResult, self.node.quantitativeValidate(None, None))

		simpleSignal = Signal('test', [0, 1], [-1, 1], [2, 0])
		self.setInputSignals(simpleSignal, simpleSignal)
		self.setInterval(0, 1)
		expectedResult = Signal('timedUntil', [0], [-1], [0])
		self.assertEqual(expectedResult, self.node.quantitativeValidate(None, None))

	def __simpleSignalBooleanTestHelper(self):
		simpleSignal = BooleanSignal('test', [0, 1], [0, 1], [1, 0])
		self.setInputSignals(simpleSignal, simpleSignal)
		self.setInterval(0, 1)
		expectedResult = BooleanSignal('until', [0], [0], [0])
		self.assertEqual(expectedResult, self.node.booleanValidate(None, None))

		simpleSignal = BooleanSignal('test', [0, 1], [-1, 1], [2, 0])
		self.setInputSignals(simpleSignal, simpleSignal)
		self.setInterval(0, 1)
		expectedResult = BooleanSignal('until', [0], [0], [0])
		self.assertEqual(expectedResult, self.node.booleanValidate(None, None))

	def __smallSignalTestHelper(self):
		left = Signal('test', [0, 1, 2, 3, 4], [2, 7, 5, 4, -1], [5, -2, -1, -5, 0])
		right = Signal('test', [0, 1, 2, 3, 4], [-1, -1, -1, 1, 1], [0, 0, 2, 0, 0])
		self.setInputSignals(left, right)

		self.setInterval(0, 4)
		result = self.node.quantitativeValidate(None, None)
		expectedResult = Signal('timedUntil', [0], [1], [0])
		self.assertEqual(expectedResult, result)

		self.setInterval(0, 2)
		result = self.node.quantitativeValidate(None, None)
		expectedResult = Signal('timedUntil', [0, 1, 1.6, 2], [-1, 1, 1, 1], [2, 0, 0, 0])
		self.assertEqual(expectedResult, result)
		
		self.setInterval(2, 4)
		result = self.node.quantitativeValidate(None, None)
		expectedResult = Signal('timedUntil', [0], [1], [0])
		self.assertEqual(expectedResult, result)

		self.setInterval(1, 2)
		result = self.node.quantitativeValidate(None, None)
		expectedResult = Signal('timedUntil', [0, 1, 1.6, 2], [-1, 1, 1, 1], [2, 0, 0, 0])
		self.assertEqual(expectedResult, result)

		self.setInterval(1, 3)
		result = self.node.quantitativeValidate(None, None)
		expectedResult = Signal('timedUntil', [0, 0.6, 1], [1, 1, 1], [0, 0, 0])
		self.assertEqual(expectedResult, result)


	def testSimpleSignalShortAlgorithm(self):
		# warnings.warn("simple short test disabled")
		# return
		self.node.useSyntaxAlgorithm()
		self.__simpleSignalTestHelper()

	def testSmallSignalShortAlgorithm(self):
		# warnings.warn("small short test disabled")
		# return
		self.node.useSyntaxAlgorithm()
		self.__smallSignalTestHelper()

	def testSimpleSignalLongAlgorithm(self):
		# warnings.warn("simple long test disabled")
		# return
		self.node.useEfficientAlgorithm()
		self.__simpleSignalTestHelper()

	def testSmallSignalLongAlgorithm(self):
		# warnings.warn("small long test disabled")
		# return
		self.node.useEfficientAlgorithm()
		self.__smallSignalTestHelper()

	def testSimpleSignalBoolean(self):
		self.__simpleSignalBooleanTestHelper()


	def testComputeTimedEventuallySubroutine(self):
		# warnings.warn("timedeventuallySubroutineTestDisabled")
		# return
		inputSignal: Signal = Signal("testSignal", [0, 1, 2, 3, 4, 5], [-1, -1, 1, 1, -1, -1], [0, 2, 0, -2, 0, 0])
		interval: Interval = Interval(0, 1)
		expectedResult: Signal = Signal("timedEventually", [0, 1, 2, 3, 4], [-1, 1, 1, 1, -1], [2, 0, 0, -2, 0])
		result: Signal = computeTimedEventually(inputSignal, interval)
		self.assertEqual(expectedResult, result)
		
		interval: Interval = Interval(0, 2)
		expectedResult: Signal = Signal("timedEventually", [0, 1, 2, 3], [1, 1, 1, 1], [0, 0, 0, 0])
		result: Signal = computeTimedEventually(inputSignal, interval)
		self.assertEqual(expectedResult, result)

		interval: Interval = Interval(0, 3)
		expectedResult: Signal = Signal("timedEventually", [0, 1, 2], [1, 1, 1], [0, 0, 0])
		result: Signal = computeTimedEventually(inputSignal, interval)
		self.assertEqual(expectedResult, result)

	def testComputeUntimedEventuallySubroutine(self):
		# warnings.warn("untimedeventuallySubroutineTestDisabled")
		# return
		inputSignal: Signal = Signal('test', [0,1,2,3,4,5], [-1,-1,1,-1,-1,-1], [0,2,-2,0,0,0])
		expectedResult: Signal = Signal('untimedEventually', [0,1,2,3,4,5], [1,1,1,-1,-1,-1], [0,0,-2,0,0,0])
		result = computeUntimedEventually(inputSignal)
		self.assertEqual(expectedResult, result)
		inputSignal: Signal = Signal('test', [3.0, 3.6, 4.0], [1, 1, -1], [0, -5, 0])
		expectedResult = Signal('untimedEventually', [3.0, 3.6, 4.0], [1, 1, -1], [0, -5, 0])
		result = computeUntimedEventually(inputSignal)
		self.assertEqual(expectedResult, result)

	def testComputeAndSubroutine(self):		
		# warnings.warn("andsubroutine Disabled")
		# return
		inputSignal: Signal = Signal('test', [0,1,2,3,4,5], [-1,-1,1,-1,-1,-1], [0,2,-2,0,0,0])
		result = computeAnd(inputSignal, inputSignal)
		inputSignal.setName('and')
		self.assertEqual(inputSignal, result)

		inputSignal: Signal = Signal('test', [0,1,2,3,4,5], [1,-1,1,-1,1,-1], [-2, 2, -2, 2, -2, 0])
		input2: Signal = Signal('test', [0,1,2,3,4,5], [1,-1,1,-1,1,-1], [-2, 2, -2, 2, -2, 0])
		result = computeAnd(inputSignal, inputSignal)
		inputSignal.setName('and')
		self.assertEqual(inputSignal, result)

		input1: Signal = Signal('test', [0,1,2,3,4,5], [1,-1,1,-1,1,-1], [-2, 2, -2, 2, -2, 0])
		input2: Signal = Signal('test', [0,1,2,3,4,5], [-1,1,-1,1,-1,1], [2, -2, 2, -2, 2, 0])
		result = computeAnd(input1, input2)
		expRes = Signal('and', [0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5], [-1,0,-1,0,-1,0,-1,0,-1,0,-1], [2,-2,2,-2,2,-2,2,-2,2,-2,0])
		self.assertEqual(expRes, result)

	def testComputeOrSubroutine(self):
		# warnings.warn("orsubroutinetest Disabled")
		# return
		inputSignal: Signal = Signal('test', [0,1,2,3,4,5], [-1,-1,1,-1,-1,-1], [0,2,-2,0,0,0])
		result = computeOr(inputSignal, inputSignal)
		inputSignal.setName('or')
		self.assertEqual(inputSignal, result)

		inputSignal: Signal = Signal('test', [0,1,2,3,4,5], [1,-1,1,-1,1,-1], [-2, 2, -2, 2, -2, 0])
		input2: Signal = Signal('test', [0,1,2,3,4,5], [1,-1,1,-1,1,-1], [-2, 2, -2, 2, -2, 0])
		result = computeOr(inputSignal, inputSignal)
		inputSignal.setName('or')
		self.assertEqual(inputSignal, result)

		input1: Signal = Signal('test', [0,1,2,3,4,5], [1,-1,1,-1,1,-1], [-2, 2, -2, 2, -2, 0])
		input2: Signal = Signal('test', [0,1,2,3,4,5], [-1,1,-1,1,-1,1], [2, -2, 2, -2, 2, 0])
		result = computeOr(input1, input2)
		expRes = Signal('or', [0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5], [1,0,1,0,1,0,1,0,1,0,1], [-2,2,-2,2,-2,2,-2,2,-2,2,0])
		self.assertEqual(expRes, result)

	def testUntimedUntilSubroutine(self):
		# warnings.warn("testUntimedUntilSubroutine Disabled")
		# return
		inputSignal: Signal = Signal('test', [0,1], [0,1], [1,0])
		result = computeUntimedUntil(inputSignal, inputSignal)
		inputSignal.setName("untimedUntil")
		self.assertEqual(inputSignal, result)

		inputSignal: Signal = Signal('test', [0,1], [-1,1], [2,0])
		result = computeUntimedUntil(inputSignal, inputSignal)
		inputSignal.setName("untimedUntil")
		self.assertEqual(inputSignal, result)
	

	def testUntilFailureCase(self):
		# warnings.warn("Until failure test disabled.")
		# return
		self.node.useEfficientAlgorithm()
		left: Signal = Signal("const1", [0, 1, 2], [1, 1, 1], [0,0,0])
		right: Signal = Signal("vary", [0,1,2], [0.3, 0.1, 0.2], [-0.2, 0.1, 0])
		interval: Interval = Interval(0, 2)
		expectedResult: Signal = Signal("timedUntil", [0], [0.3], [0])
		actualResult: Signal = computeTimedUntil(left, right, interval)
		self.assertEqual(expectedResult, actualResult)

	def testEventuallyFailureCase(self):
		# warnings.warn("Eventually failure test disabled.")
		# return
		s = Signal("t", [0,1,2], [0.3,0.1,0.2], [-0.2, 0.1, 0])
		interval: Interval = Interval(0, 2)
		expectedResult = Signal('timedEventually', [0], [0.3], [0])
		actualResult = computeTimedEventually(s, interval)
		self.assertEqual(expectedResult, actualResult)


if __name__ == "__main__":
	unittest.main()



# These were generated using Laurens' implementation -- both cases are from this one formula - two Until operations are computed.
# Formula: []{0,300}(x1-><>{3,5}x2)
# signals: signals/ex_sin1.csv
# semantics: quantitative
# Algo: short
TESTCASE1_INTERVAL_LOWERBOUND: int = 3
TESTCASE1_INTERVAL_UPPERBOUND: int = 5
TESTCASE1_LEFTCHILD_SIGNAL: Signal = Signal('lc
TESTCASE1_RIGHTCHILD_SIGNAL: Signal = Signal('rc1', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309], [0.0, 0.0, 0.0, 0.0, 0.0, 0.058826673, 0.194712389, 0.259476925, 0.378180274, 0.40972079, 0.463972107, 0.522986054, 0.545206016, 0.706489542, 0.751477687, 0.797382135, 0.77959748, 0.820263959, 0.893548613, 0.953473577, 0.95328881, 0.971531285, 0.990549889, 0.997391279, 0.995344892, 0.988867213, 0.982947859, 0.961077181, 0.96113601, 0.906806579, 0.882403528, 0.848801441, 0.74345059, 0.744990197, 0.638242029, 0.663860436, 0.532792848, 0.543181275, 0.385640446, 0.264338221, 0.315829613, 0.17320498, 0.092904429, 0.067926413, -0.110044949, -0.163508769, -0.263395155, -0.220553656, -0.342609326, -0.416973165, -0.449090251, -0.517573429, -0.61236945, -0.702456664, -0.730006119, -0.80272959, -0.864778167, -0.871533257, -0.935375603, -0.971124522, -0.986628749, -0.986410156, -0.991448979, -0.99842581, -0.997133889, -0.995163629, -0.978306003, -0.928863252, -0.912230431, -0.85768388, -0.879979937, -0.808627527, -0.702363821, -0.741481649, -0.601495716, -0.553444669, -0.476589532, -0.490844327, -0.353516106, -0.277223546, -0.139102944, -0.192377291, -0.106626537, 0.044688029, 0.160320101, 0.158362573, 0.258254886, 0.299862416, 0.495035051, 0.562757179, 0.528104347, 0.589860787, 0.629633944, 0.729962706, 0.798916117, 0.845816587, 0.883990498, 0.912287211, 0.953595511, 0.957083726, 0.988403765, 0.999556997, 0.99934349, 0.999110503, 0.987450676, 0.970419964, 0.935487435, 0.929451481, 0.885412815, 0.826482172, 0.768526476, 0.772438557, 0.687856593, 0.621144208, 0.554750407, 0.565978393, 0.433935004, 0.323425325, 0.24804298, 0.141677037, 0.142013466, 0.031109534, -0.056169433, -0.112586007, -0.243782527, -0.330097152, -0.343482333, -0.400978057, -0.525345546, -0.583236681, -0.660521951, -0.697418888, -0.697383454, -0.731583306, -0.871510236, -0.875383916, -0.900672639, -0.947747621, -0.966079016, -0.975027786, -0.990999483, -0.999856305, -0.999963115, -0.978763735, -0.982257363, -0.966677425, -0.927023751, -0.915986006, -0.882415926, -0.832914557, -0.750592996, -0.760087665, -0.649582809, -0.552532116, -0.593415265, -0.487130934, -0.322128485, -0.353567974, -0.223831828, -0.201822193, -0.118874512, 0.022007661, 0.01238295, 0.212222163, 0.301342546, 0.267199001, 0.417562572, 0.531093852, 0.485533898, 0.578784658, 0.631115248, 0.667505636, 0.758719742, 0.844164494, 0.84337629, 0.880704187, 0.957092721, 0.932453562, 0.981137321, 0.983130986, 0.999963711, 0.99981013, 0.984535704, 0.965186083, 0.957212566, 0.917411166, 0.898830531, 0.904931976, 0.810938287, 0.781679262, 0.713950709, 0.723447108, 0.603290165, 0.600129055, 0.53879427, 0.398758857, 0.326551199, 0.183110803, 0.106025731, 0.119703416, -0.045212923, -0.135513918, -0.092418035, -0.173940783, -0.347906379, -0.370030962, -0.415248906, -0.50848844, -0.601413201, -0.631568616, -0.694025771, -0.744993211, -0.823475176, -0.81544584, -0.892351652, -0.924756874, -0.957270246, -0.976472888, -0.989537696, -0.99566712, -0.999590945, -0.99157962, -0.994905154, -0.978904424, -0.923671775, -0.926825517, -0.898093638, -0.850382157, -0.788594861, -0.692101654, -0.690288239, -0.610715856, -0.576499039, -0.483098111, -0.377535845, -0.35129962, -0.347880794, -0.134224652, -0.196491588, 0.004811825, -0.012085965, 0.105536343, 0.244669958, 0.346484555, 0.382648637, 0.463998043, 0.542035083, 0.543411422, 0.642672451, 0.663313225, 0.788864544, 0.826065431, 0.815827802, 0.904630957, 0.910945722, 0.930873733, 0.974453253, 0.969922514, 0.998951644, 0.996313324, 0.990888195, 0.98344209, 0.953366915, 0.956273071, 0.930000746, 0.893851352, 0.881858709, 0.84544711, 0.733996244, 0.666752479, 0.65184552, 0.53165707, 0.548855157, 0.404164769, 0.354511638, 0.31185975, 0.159230887, 0.195382859, 0.074972308, -0.02261868, -0.144113359, -0.127662252, -0.323317844, -0.273906254, -0.413159274, -0.422145575, -0.570261423, -0.672774255, -0.683155195, -0.751613408, -0.800665174, -0.831225931, -0.884172687, -0.933198881, -0.909946264, -0.967485829, -0.979668842, -0.98271145, -0.999999987, -0.999601333, -0.995705607, -0.988228405, -0.945270965, -0.952229589, -0.893940777, -0.884964469, -0.84172006, -0.752305666, -0.718932254, -0.63749937], [0.0, 0.0, 0.0, 0.0, 0.058826673, 0.13588571600000002, 0.06476453600000001, 0.11870334899999996, 0.03154051600000002, 0.05425131700000002, 0.059013946999999956, 0.022219961999999982, 0.16128352600000007, 0.044988144999999924, 0.04590444800000004, -0.017784655000000038, 0.04066647900000009, 0.07328465399999995, 0.059924964000000025, -0.0001847670000000301, 0.01824247499999998, 0.019018603999999995, 0.006841390000000058, -0.0020463870000000384, -0.0064776789999999584, -0.005919353999999988, -0.021870678000000088, 5.88290000000935e-05, -0.054329431000000095, -0.024403050999999953, -0.033602087, -0.10535085099999997, 0.0015396069999999984, -0.10674816799999998, 0.025618406999999954, -0.13106758799999996, 0.010388426999999978, -0.157540829, -0.12130222500000004, 0.051491392000000025, -0.142624633, -0.08030055100000001, -0.024978015999999992, -0.17797136200000002, -0.053463819999999995, -0.099886386, 0.042841499000000005, -0.12205567, -0.07436383899999999, -0.03211708600000002, -0.06848317800000003, -0.09479602099999995, -0.09008721399999997, -0.027549455000000056, -0.07272347099999998, -0.062048576999999994, -0.006755089999999964, -0.06384234600000005, -0.03574891899999999, -0.015504226999999982, 0.00021859299999993365, -0.0050388229999999146, -0.006976831000000017, 0.0012919209999999737, 0.0019702600000000015, 0.01685762599999996, 0.04944275100000006, 0.016632820999999964, 0.054546551000000054, -0.022296057000000036, 0.07135241000000003, 0.1062637059999999, -0.039117827999999966, 0.13998593300000006, 0.04805104699999996, 0.07685513700000002, -0.014254795000000042, 0.13732822100000003, 0.07629256000000001, 0.13812060199999998, -0.053274347, 0.08575075400000001, 0.15131456599999998, 0.115632072, -0.001957527999999986, 0.09989231300000001, 0.041607530000000004, 0.19517263499999998, 0.06772212799999999, -0.03465283200000002, 0.061756440000000024, 0.03977315699999995, 0.10032876200000007, 0.06895341099999996, 0.04690046999999997, 0.038173911000000005, 0.02829671300000003, 0.041308299999999964, 0.0034882150000000722, 0.03132003900000002, 0.011153231999999957, -0.00021350700000000167, -0.0002329869999999623, -0.011659827000000011, -0.01703071200000006, -0.03493252899999999, -0.00603595400000001, -0.04403866599999995, -0.05893064300000006, -0.057955695999999945, 0.003912080999999956, -0.08458196399999995, -0.06671238499999999, -0.06639380100000003, 0.011227985999999968, -0.13204338899999996, -0.11050967900000003, -0.07538234499999999, -0.10636594299999999, 0.0003364289999999992, -0.11090393200000001, -0.087278967, -0.056416574000000004, -0.13119651999999998, -0.086314625, -0.013385180999999968, -0.057495724000000026, -0.12436748900000005, -0.05789113499999998, -0.07728526999999996, -0.03689693699999996, 3.543399999994534e-05, -0.034199851999999975, -0.13992693, -0.0038736799999999905, -0.02528872300000007, -0.04707498199999993, -0.018331395000000028, -0.00894876999999994, -0.015971697000000007, -0.008856822000000042, -0.00010681000000001273, 0.02119937999999999, -0.003493627999999971, 0.015579938000000015, 0.03965367399999997, 0.011037744999999988, 0.03357008000000006, 0.049501368999999906, 0.0823215610000001, -0.009494669000000067, 0.11050485600000004, 0.09705069300000002, -0.04088314900000001, 0.10628433099999995, 0.165002449, -0.03143948899999999, 0.129736146, 0.022009635, 0.08294768100000001, 0.140882173, -0.009624711000000001, 0.199839213, 0.089120383, -0.034143545, 0.15036357100000003, 0.11353128000000001, -0.045559954000000014, 0.09325075999999999, 0.052330589999999955, 0.03639038800000005, 0.09121410600000002, 0.08544475200000001, -0.0007882040000000146, 0.03732789699999994, 0.07638853400000001, -0.02463915900000002, 0.04868375899999999, 0.001993665000000089, 0.016832724999999993, -0.00015358100000006925, -0.015274425999999952, -0.01934962100000004, -0.00797351699999993, -0.0398014000000001, -0.018580634999999956, 0.006101444999999983, -0.09399368899999994, -0.029259024999999994, -0.06772855300000002, 0.009496398999999989, -0.12015694300000002, -0.003161109999999967, -0.061334785, -0.140035413, -0.07220765800000001, -0.14344039600000003, -0.07708507199999999, 0.013677685000000009, -0.16491633900000002, -0.09030099500000001, 0.043095883000000015, -0.08152274799999999, -0.173965596, -0.02212458300000003, -0.045217943999999954, -0.09323953400000007, -0.09292476099999991, -0.030155415000000074, -0.06245715499999993, -0.050967440000000086, -0.07848196499999993, 0.008029335999999998, -0.07690581200000002, -0.032405221999999956, -0.03251337200000004, -0.019202641999999992, -0.013064807999999983, -0.00612942400000005, -0.003923824999999992, 0.008011325000000014, -0.003325534000000019, 0.01600073000000002, 0.05523264900000002, -0.0031537420000000704, 0.02873187900000007, 0.047711481, 0.06178729599999999, 0.09649320699999997, 0.001813414999999985, 0.07957238300000002, 0.03421681700000001, 0.093400928, 0.10556226600000002, 0.026236225000000002, 0.003418825999999986, 0.213656142, -0.062266935999999995, 0.201303413, -0.01689779, 0.11762230800000001, 0.139133615, 0.10181459700000003, 0.036164081999999986, 0.08134940600000001, 0.07803704, 0.0013763390000000042, 0.099261029, 0.020640773999999973, 0.12555131899999994, 0.037200887000000016, -0.010237628999999915, 0.08880315499999991, 0.0063147650000000555, 0.019928010999999968, 0.04357951999999998, -0.004530739000000006, 0.02902913000000007, -0.002638320000000083, -0.0054251289999999175, -0.007446104999999981, -0.03007517500000001, 0.002906155999999993, -0.026272324999999985, -0.03614939400000006, -0.011992643000000025, -0.03641159900000002, -0.11145086599999998, -0.06724376499999996, -0.014906959000000053, -0.12018845, 0.01719808700000003, -0.144690388, -0.04965313099999996, -0.04265188800000003, -0.152628863, 0.036151972000000004, -0.12041055099999999, -0.097590988, -0.121494679, 0.016451106999999993, -0.19565559200000002, 0.049411590000000005, -0.13925302, -0.008986300999999974, -0.14811584800000005, -0.10251283199999994, -0.010380940000000005, -0.06845821299999999, -0.04905176600000005, -0.03056075699999994, -0.052946755999999984, -0.04902619400000008, 0.02325261700000003, -0.057539565000000015, -0.01218301300000002, -0.003042608000000002, -0.017288536999999993, 0.0003986540000000538, 0.0038957259999999883, 0.007477202000000016, 0.04295744000000001, -0.006958624000000024, 0.05828881200000002, 0.008976307999999933, 0.04324440900000004, 0.08941439399999995, 0.03337341199999999, 0.08143288400000004, 0])
TESTCASE1_RESULT_SIGNAL: Signal = Signal('timedUntil', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [0.058826673, 0.194712389, 0.259476925, 0.378180274, 0.40972079, 0.463972107, 0.522986054, 0.545206016, 0.706489542, 0.751477687, 0.797382135, 0.797382135, 0.820263959, 0.893548613, 0.953473577, 0.953473577, 0.971531285, 0.990549889, 0.997391279, 0.997391279, 0.997391279, 0.995344892, 0.988867213, 0.982947859, 0.96113601, 0.96113601, 0.906806579, 0.882403528, 0.848801441, 0.744990197, 0.744990197, 0.663860436, 0.663860436, 0.543181275, 0.543181275, 0.385640446, 0.315829613, 0.315829613, 0.17320498, 0.092904429, 0.067926413, -0.110044949, -0.163508769, -0.220553656, -0.220553656, -0.342609326, -0.416973165, -0.449090251, -0.517573429, -0.61236945, -0.702456664, -0.730006119, -0.80272959, -0.864778167, -0.871533257, -0.935375603, -0.971124522, -0.986410156, -0.986410156, -0.991448979, -0.995163629, -0.978306003, -0.928863252, -0.912230431, -0.85768388, -0.85768388, -0.808627527, -0.702363821, -0.702363821, -0.601495716, -0.553444669, -0.476589532, -0.476589532, -0.353516106, -0.277223546, -0.139102944, -0.139102944, -0.106626537, 0.044688029, 0.160320101, 0.160320101, 0.258254886, 0.299862416, 0.495035051, 0.562757179, 0.562757179, 0.589860787, 0.629633944, 0.729962706, 0.798916117, 0.845816587, 0.883990498, 0.912287211, 0.953595511, 0.957083726, 0.988403765, 0.999556997, 0.999556997, 0.999556997, 0.99934349, 0.999110503, 0.987450676, 0.970419964, 0.935487435, 0.929451481, 0.885412815, 0.826482172, 0.772438557, 0.772438557, 0.687856593, 0.621144208, 0.565978393, 0.565978393, 0.433935004, 0.323425325, 0.24804298, 0.142013466, 0.142013466, 0.031109534, -0.056169433, -0.112586007, -0.243782527, -0.330097152, -0.343482333, -0.400978057, -0.525345546, -0.583236681, -0.660521951, -0.697383454, -0.697383454, -0.731583306, -0.871510236, -0.875383916, -0.900672639, -0.947747621, -0.966079016, -0.975027786, -0.990999483, -0.978763735, -0.978763735, -0.966677425, -0.927023751, -0.915986006, -0.882415926, -0.832914557, -0.750592996, -0.750592996, -0.649582809, -0.552532116, -0.552532116, -0.487130934, -0.322128485, -0.322128485, -0.223831828, -0.201822193, -0.118874512, 0.022007661, 0.022007661, 0.212222163, 0.301342546, 0.301342546, 0.417562572, 0.531093852, 0.531093852, 0.578784658, 0.631115248, 0.667505636, 0.758719742, 0.844164494, 0.844164494, 0.880704187, 0.957092721, 0.957092721, 0.981137321, 0.983130986, 0.999963711, 0.999963711, 0.999963711, 0.99981013, 0.984535704, 0.965186083, 0.957212566, 0.917411166, 0.904931976, 0.904931976, 0.810938287, 0.781679262, 0.723447108, 0.723447108, 0.603290165, 0.600129055, 0.53879427, 0.398758857, 0.326551199, 0.183110803, 0.119703416, 0.119703416, -0.045212923, -0.092418035, -0.092418035, -0.173940783, -0.347906379, -0.370030962, -0.415248906, -0.50848844, -0.601413201, -0.631568616, -0.694025771, -0.744993211, -0.81544584, -0.81544584, -0.892351652, -0.924756874, -0.957270246, -0.976472888, -0.989537696, -0.99157962, -0.99157962, -0.978904424, -0.923671775, -0.923671775, -0.898093638, -0.850382157, -0.788594861, -0.692101654, -0.690288239, -0.610715856, -0.576499039, -0.483098111, -0.377535845, -0.35129962, -0.347880794, -0.134224652, -0.134224652, 0.004811825, 0.004811825, 0.105536343, 0.244669958, 0.346484555, 0.382648637, 0.463998043, 0.542035083, 0.543411422, 0.642672451, 0.663313225, 0.788864544, 0.826065431, 0.826065431, 0.904630957, 0.910945722, 0.930873733, 0.974453253, 0.974453253, 0.998951644, 0.998951644, 0.998951644, 0.996313324, 0.990888195, 0.98344209, 0.956273071, 0.956273071, 0.930000746, 0.893851352, 0.881858709, 0.84544711, 0.733996244, 0.666752479, 0.65184552, 0.548855157, 0.548855157, 0.404164769, 0.354511638, 0.31185975, 0.195382859, 0.195382859, 0.074972308, -0.02261868, -0.127662252, -0.127662252, -0.273906254, -0.273906254, -0.413159274, -0.422145575, -0.570261423, -0.672774255, -0.683155195, -0.751613408, -0.800665174, -0.831225931, -0.884172687, -0.909946264, -0.909946264, -0.967485829, -0.979668842, -0.98271145, -0.995705607, -0.988228405, -0.945270965, -0.945270965, -0.893940777, -0.884964469, -0.84172006, -0.752305666, -0.718932254, -0.63749937], [0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0020463870000000384, -0.005919353999999988, 0, 0, 0, -0.024403050999999953, -0.024403050999999953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.024978015999999992, -0.024978015999999992, -0.024978015999999992, -0.053463819999999995, 0, 0, 0, -0.03211708600000002, -0.03211708600000002, -0.03211708600000002, -0.06848317800000003, -0.027549455000000056, -0.027549455000000056, -0.027549455000000056, -0.006755089999999964, -0.006755089999999964, -0.006755089999999964, -0.015504226999999982, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00021350700000000167, -0.0002329869999999623, -0.011659827000000011, -0.00603595400000001, -0.00603595400000001, -0.00603595400000001, -0.04403866599999995, 0, 0, 0, -0.06639380100000003, 0, 0, 0, -0.07538234499999999, -0.07538234499999999, 0, 0, 0, -0.056416574000000004, -0.056416574000000004, -0.056416574000000004, -0.013385180999999968, -0.013385180999999968, -0.013385180999999968, -0.057495724000000026, -0.05789113499999998, -0.03689693699999996, 0, 0, 0, -0.0038736799999999905, -0.0038736799999999905, -0.0038736799999999905, -0.018331395000000028, -0.00894876999999994, -0.00894876999999994, -0.008856822000000042, -0.00010681000000001273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00015358100000006925, -0.00797351699999993, -0.00797351699999993, -0.00797351699999993, 0, 0, 0, -0.029259024999999994, 0, 0, 0, -0.003161109999999967, -0.003161109999999967, -0.061334785, -0.07220765800000001, -0.07220765800000001, 0, 0, 0, 0, 0, 0, -0.02212458300000003, -0.02212458300000003, -0.02212458300000003, -0.045217943999999954, -0.030155415000000074, -0.030155415000000074, -0.030155415000000074, -0.050967440000000086, 0, 0, 0, -0.032405221999999956, -0.019202641999999992, -0.013064807999999983, -0.00612942400000005, -0.003923824999999992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.002638320000000083, -0.0054251289999999175, 0, 0, 0, -0.011992643000000025, -0.011992643000000025, -0.011992643000000025, -0.03641159900000002, -0.014906959000000053, -0.014906959000000053, 0, 0, 0, -0.04265188800000003, -0.04265188800000003, 0, 0, 0, -0.097590988, 0, 0, 0, 0, 0, -0.008986300999999974, -0.008986300999999974, -0.010380940000000005, -0.010380940000000005, -0.010380940000000005, -0.03056075699999994, -0.03056075699999994, -0.03056075699999994, 0, 0, 0, -0.003042608000000002, -0.003042608000000002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

TESTCASE1_VALUES = [TESTCASE1_INTERVAL_LOWERBOUND, TESTCASE1_INTERVAL_UPPERBOUND, TESTCASE1_LEFTCHILD_SIGNAL, TESTCASE1_RIGHTCHILD_SIGNAL, TESTCASE1_RESULT_SIGNAL]

TESTCASE2_INTERVAL_LOWERBOUND: int = 0
TESTCASE2_INTERVAL_UPPERBOUND: int = 300
TESTCASE2_LEFTCHILD_SIGNAL: Signal = Signal('lc
TESTCASE2_RIGHTCHILD_SIGNAL: Signal = Signal('rc1', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 40.03079318089668, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 77.97975389167328, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 118.06641014958879, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 156.72474989444393, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 196.57044133348074, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 235.19473860371548, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 275.30971272907703, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309], [-0.058826673, -0.194712389, -0.259476925, -0.378180274, -0.40972079, -0.463972107, -0.522986054, -0.545206016, -0.706489542, -0.751477687, -0.797382135, -0.797382135, -0.820263959, -0.893548613, -0.953473577, -0.953473577, -0.971531285, -0.990549889, -0.997391279, -0.997391279, -0.997391279, -0.995344892, -0.988867213, -0.982947859, -0.96113601, -0.96113601, -0.906806579, -0.882403528, -0.848801441, -0.744990197, -0.744990197, -0.663860436, -0.663860436, -0.543181275, -0.543181275, -0.385640446, -0.315829613, -0.315829613, -0.17320498, -0.092904429, -0.067926413, -0.06244610865550543, -0.13961343, -0.218338519, -0.295665571, -0.371099455, -0.444157161, -0.514370895, -0.581291075, -0.644489204, -0.703560621, -0.758127087, -0.807839209, -0.852378676, -0.891460299, -0.924833835, -0.952285592, -0.973639793, -0.988759706, -0.997548516, -0.99994995, -0.995948629, -0.985570175, -0.968881042, -0.945988092, -0.917037909, -0.882215864, -0.841744926, -0.795884232, -0.744927432, -0.689200806, -0.629061176, -0.564893621, -0.497109009, -0.426141372, -0.35244512, -0.276492135, -0.198768751, -0.119772635, -0.04162449790535486, -0.044688029, -0.160320101, -0.160320101, -0.258254886, -0.299862416, -0.495035051, -0.562757179, -0.562757179, -0.589860787, -0.629633944, -0.729962706, -0.798916117, -0.845816587, -0.883990498, -0.912287211, -0.953595511, -0.957083726, -0.988403765, -0.999556997, -0.999556997, -0.999556997, -0.99934349, -0.999110503, -0.987450676, -0.970419964, -0.935487435, -0.929451481, -0.885412815, -0.826482172, -0.772438557, -0.772438557, -0.687856593, -0.621144208, -0.565978393, -0.565978393, -0.433935004, -0.323425325, -0.24804298, -0.142013466, -0.142013466, -0.031109534, -0.025313324745575263, -0.099883885, -0.179119396, -0.257207993, -0.333649668, -0.407954959, -0.479648085, -0.548269987, -0.613381277, -0.67456504, -0.731429513, -0.783610589, -0.830774147, -0.872618197, -0.908874808, -0.939311825, -0.963734359, -0.98198603, -0.993949972, -0.999549577, -0.998748993, -0.991553344, -0.978008705, -0.958201804, -0.932259465, -0.9003478, -0.86267114, -0.819470733, -0.771023194, -0.717638736, -0.659659183, -0.597455784, -0.531426831, -0.461995112, -0.389605205, -0.314720626, -0.237820867, -0.159398324, -0.079955141, -0.022007660999999956, -0.022007661, -0.212222163, -0.301342546, -0.301342546, -0.417562572, -0.531093852, -0.531093852, -0.578784658, -0.631115248, -0.667505636, -0.758719742, -0.844164494, -0.844164494, -0.880704187, -0.957092721, -0.957092721, -0.981137321, -0.983130986, -0.999963711, -0.999963711, -0.999963711, -0.99981013, -0.984535704, -0.965186083, -0.957212566, -0.917411166, -0.904931976, -0.904931976, -0.810938287, -0.781679262, -0.723447108, -0.723447108, -0.603290165, -0.600129055, -0.53879427, -0.398758857, -0.326551199, -0.183110803, -0.119703416, -0.119703416, -0.025628319668076792, -0.059994385, -0.13961343, -0.218338519, -0.295665571, -0.371099455, -0.444157161, -0.514370895, -0.581291075, -0.644489204, -0.703560621, -0.758127087, -0.807839209, -0.852378676, -0.891460299, -0.924833835, -0.952285592, -0.973639793, -0.988759706, -0.997548516, -0.99994995, -0.995948629, -0.985570175, -0.968881042, -0.945988092, -0.917037909, -0.882215864, -0.841744926, -0.795884232, -0.744927432, -0.689200806, -0.629061176, -0.564893621, -0.497109009, -0.426141372, -0.35244512, -0.276492135, -0.198768751, -0.119772635, -0.040009607, -0.02442677699522954, -0.105536343, -0.244669958, -0.346484555, -0.382648637, -0.463998043, -0.542035083, -0.543411422, -0.642672451, -0.663313225, -0.788864544, -0.826065431, -0.826065431, -0.904630957, -0.910945722, -0.930873733, -0.974453253, -0.974453253, -0.998951644, -0.998951644, -0.998951644, -0.996313324, -0.990888195, -0.98344209, -0.956273071, -0.956273071, -0.930000746, -0.893851352, -0.881858709, -0.84544711, -0.733996244, -0.666752479, -0.65184552, -0.548855157, -0.548855157, -0.404164769, -0.354511638, -0.31185975, -0.195382859, -0.195382859, -0.074972308, -0.044747136773195785, -0.099883885, -0.179119396, -0.257207993, -0.333649668, -0.407954959, -0.479648085, -0.548269987, -0.613381277, -0.67456504, -0.731429513, -0.783610589, -0.830774147, -0.872618197, -0.908874808, -0.939311825, -0.963734359, -0.98198603, -0.993949972, -0.999549577, -0.998748993, -0.991553344, -0.978008705, -0.958201804, -0.932259465, -0.9003478, -0.86267114, -0.819470733, -0.771023194, -0.717638736, -0.659659183, -0.597455784, -0.531426831, -0.461995112, -0.389605205], [-0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0020463870000000384, 0.005919353999999988, 0, 0, 0, 0.024403050999999953, 0.024403050999999953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.024978015999999992, 0.024978015999999992, 0.024978015999999992, 0.053463819999999995, -0.07961904500000001, -0.078725089, -0.07732705200000001, -0.075433884, -0.073057706, -0.07021373399999997, -0.06692018, -0.06319812899999999, -0.05907141700000007, -0.054566465999999925, -0.04971212199999997, -0.044539467, -0.039081623000000065, -0.03337353600000004, -0.02745175699999991, -0.021354201000000073, -0.01511991299999993, -0.008788810000000091, -0.0024014339999999246, 0.004001320999999947, 0.010378454000000037, 0.016689132999999967, 0.022892950000000023, 0.028950182999999963, 0.03482204500000008, 0.04047093800000001, 0.045860693999999924, 0.050956800000000024, 0.055726626, 0.06013963, 0.06416755500000004, 0.06778461199999997, 0.07096763699999997, 0.07369625200000002, 0.07595298499999997, 0.07772338400000003, 0.07899611599999999, 0.079763028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00021350700000000167, 0.0002329869999999623, 0.011659827000000011, 0.00603595400000001, 0.00603595400000001, 0.00603595400000001, 0.04403866599999995, 0, 0, 0, 0.06639380100000003, 0, 0, 0, 0.07538234499999999, 0.07538234499999999, 0, 0, 0, 0.056416574000000004, 0.056416574000000004, -0.079875076, -0.07923551099999998, -0.07808859700000004, -0.07644167499999999, -0.074305291, -0.071693126, -0.06862190199999996, -0.06511129000000004, -0.06118376299999995, -0.05686447300000008, -0.05218107599999999, -0.04716355799999994, -0.04184405000000002, -0.036256610999999994, -0.03043701700000001, -0.02442253400000005, -0.018251670999999914, -0.01196394200000006, -0.0055996050000000075, 0.0008005840000000486, 0.007195649000000026, 0.013544638999999914, 0.019806901000000043, 0.02594233899999998, 0.03191166499999998, 0.03767666000000003, 0.04320040700000005, 0.048447538999999984, 0.05338445799999991, 0.05797955300000002, 0.06220339900000005, 0.066028953, 0.069431719, 0.07238990699999998, 0.074884579, 0.07689975900000001, 0.07842254299999998, 0.07944318300000001, 0.079955141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00015358100000006925, 0.00797351699999993, 0.00797351699999993, 0.00797351699999993, 0, 0, 0, 0.029259024999999994, 0, 0, 0, 0.003161109999999967, 0.003161109999999967, 0.061334785, 0.07220765800000001, 0.07220765800000001, 0, 0, 0, 0, -0.080003194, -0.07961904500000001, -0.078725089, -0.07732705200000001, -0.075433884, -0.073057706, -0.07021373399999997, -0.06692018, -0.06319812899999999, -0.05907141700000007, -0.054566465999999925, -0.04971212199999997, -0.044539467, -0.039081623000000065, -0.03337353600000004, -0.02745175699999991, -0.021354201000000073, -0.01511991299999993, -0.008788810000000091, -0.0024014339999999246, 0.004001320999999947, 0.010378454000000037, 0.016689132999999967, 0.022892950000000023, 0.028950182999999963, 0.03482204500000008, 0.04047093800000001, 0.045860693999999924, 0.050956800000000024, 0.055726626, 0.06013963, 0.06416755500000004, 0.06778461199999997, 0.07096763699999997, 0.07369625200000002, 0.07595298499999997, 0.07772338400000003, 0.07899611599999999, 0.079763028, 0.080019214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002638320000000083, 0.0054251289999999175, 0, 0, 0, 0.011992643000000025, 0.011992643000000025, 0.011992643000000025, 0.03641159900000002, 0.014906959000000053, 0.014906959000000053, 0, 0, 0, 0.04265188800000003, 0.04265188800000003, 0, 0, 0, 0.097590988, 0, -0.079875076, -0.07923551099999998, -0.07808859700000004, -0.07644167499999999, -0.074305291, -0.071693126, -0.06862190199999996, -0.06511129000000004, -0.06118376299999995, -0.05686447300000008, -0.05218107599999999, -0.04716355799999994, -0.04184405000000002, -0.036256610999999994, -0.03043701700000001, -0.02442253400000005, -0.018251670999999914, -0.01196394200000006, -0.0055996050000000075, 0.0008005840000000486, 0.007195649000000026, 0.013544638999999914, 0.019806901000000043, 0.02594233899999998, 0.03191166499999998, 0.03767666000000003, 0.04320040700000005, 0.048447538999999984, 0.05338445799999991, 0.05797955300000002, 0.06220339900000005, 0.066028953, 0.069431719, 0.07238990699999998, 0])
TESTCASE2_RESULT_SIGNAL: Signal = Signal('timedUntil', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [-0.022007660999999956, -0.022007660999999956, -0.022007660999999956, -0.022007660999999956, -0.022007660999999956, -0.022007660999999956, -0.022007660999999956, -0.022007660999999956, -0.022007660999999956, -0.022007660999999956], [-0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


TESTCASE2_VALUES = [TESTCASE2_INTERVAL_LOWERBOUND, TESTCASE2_INTERVAL_UPPERBOUND, TESTCASE2_LEFTCHILD_SIGNAL, TESTCASE2_RIGHTCHILD_SIGNAL, TESTCASE2_RESULT_SIGNAL]
