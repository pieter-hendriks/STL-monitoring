AbsoluteValueNode:
	When implementing this node, the values of a signal get inverted if (and only if) they're negative.
	Take a sine wave signal, with recorded value each time the value == 1 or -1. Then we have a first checkpoint at pi/4, and then every pi/2. The derivatives for this signal are clearly non-zero.
	Assume this signal is passed through an absolute value node, then the signal becomes, in essence, a constant. Should the derivatives be updated to reflect that?
		Laurens' code did not do this. Mine does currently.
		Unsure if code requiring derivatives computes them as needed.

QuantitativeSignalNode:
	Looks like it is unused? Keeping it in for now, but both evaluation functions currently simply throw.
	Why is there no requirement for semantic==quantitative?
	In what context does a Boolean-semantic QuantitativeSignalNode make sense?

BooleanFilterNode:
	Rename to ComparisonOperatorNode?
	Seems to convey much more clearly what the node actually is. 
	Comments can specify that the resulting Signal will be Boolean-valued.

AndNode:
	Testing this is essentially identical to testing the calculate_and_or function, with parameter 'and'.
	However, there's no OrNode (because it gets replaced by 'not and(not a, not b)' during parsing)
	Does any part of the code use the or computation part of calculate_and_or? If no, wouldn't it make more sense to eliminate that function?